name: CI

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    name: backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: inventory
          POSTGRES_PASSWORD: inventory
          POSTGRES_DB: inventory
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U inventory -d inventory"
          --health-interval=5s --health-timeout=5s --health-retries=20

    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            pip install -e ".[dev]" || true
          fi
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Fallbacks (als projectbestanden nog minimal zijn):
          pip install fastapi uvicorn[standard] "SQLAlchemy>=2" alembic psycopg[binary] pydantic pytest black isort flake8 mypy || true

      - name: Lint & typecheck
        run: |
          if [ -d app ]; then
            black --check app
            isort --check-only app
            flake8 app
            mypy app || true  # mypy mag voorlopig waarschuwen zonder build te breken
          else
            echo "No backend/app dir found; skipping lint/typecheck"
          fi

      - name: Tests
        env:
          DATABASE_URL: postgresql+psycopg://inventory:inventory@localhost:5432/inventory
        run: |
          if ls tests 1>/dev/null 2>&1; then
            pytest -q
          else
            echo "No backend/tests found; running smoke test"
            python - <<'PY'
print("smoke ok")
PY
          fi

  frontend:
    name: frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            frontend/pnpm-lock.yaml
            frontend/yarn.lock

      - name: Install
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          else
            echo "No package.json; skipping install"
          fi

      - name: Lint
        run: |
          if [ -f package.json ]; then
            npx eslint . --max-warnings=0 || true
          else
            echo "No package.json; skipping lint"
          fi

      - name: Typecheck
        run: |
          if [ -f tsconfig.json ]; then
            npx tsc --noEmit
          else
            echo "No tsconfig.json; skipping typecheck"
          fi
